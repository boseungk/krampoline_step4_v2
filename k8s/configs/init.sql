CREATE SCHEMA IF NOT EXISTS `krampoline` DEFAULT CHARACTER SET utf8mb4;

GRANT
ALL
ON *.* TO 'root'@'localhost' IDENTIFIED BY 'root' WITH GRANT OPTION;
GRANT ALL
ON krampoline.* TO 'root'@'localhost';
FLUSH
PRIVILEGES;

USE
`krampoline`;

drop table if exists account cascade;
drop table if exists admin cascade;
drop table if exists celebrity cascade;
drop table if exists comment cascade;
drop table if exists evidence cascade;
drop table if exists follow cascade;
drop table if exists heart cascade;
drop table if exists member cascade;
drop table if exists news cascade;
drop table if exists payment cascade;
drop table if exists post cascade;
drop table if exists withdrawal cascade;
create table account
(
    balance    integer,
    account_id bigint generated by default as identity,
    manager_id bigint not null,
    post_id    bigint not null,
    primary key (account_id)
);
create table admin
(
    member_id bigint not null,
    post_id   bigint not null,
    primary key (member_id, post_id)
);
create table celebrity
(
    follower_count  integer,
    celebrity_id    bigint generated by default as identity,
    created_at      timestamp(6) not null,
    modified_at     timestamp(6) not null,
    name            varchar(15)  not null,
    celeb_group     varchar(50),
    approval_status varchar(255) not null check (approval_status in ('PENDING', 'APPROVED')),
    celeb_type      varchar(255) not null check (celeb_type in
                                                 ('SINGER', 'ACTOR', 'COMEDIAN', 'SPORT', 'INFLUENCER', 'ETC')),
    gender          varchar(255) not null check (gender in ('MALE', 'FEMALE')),
    profile_image   varchar(255),
    primary key (celebrity_id)
);
create table comment
(
    is_deleted    boolean      not null,
    comment_id    bigint generated by default as identity,
    created_at    timestamp(6) not null,
    modified_at   timestamp(6) not null,
    post_id       bigint       not null,
    writer_id     bigint       not null,
    comment_order varchar(255) not null,
    content       varchar(255) not null,
    primary key (comment_id)
);
create table evidence
(
    applicant_id  bigint       not null,
    created_at    timestamp(6) not null,
    evidence_id   bigint generated by default as identity,
    modified_at   timestamp(6) not null,
    post_id       bigint       not null,
    withdrawal_id bigint       not null,
    url           varchar(255) not null,
    primary key (evidence_id),
    constraint index_withdrawal unique (withdrawal_id)
);
create table follow
(
    celebrity_id bigint not null,
    member_id    bigint not null,
    primary key (celebrity_id, member_id)
);
create table heart
(
    celeb_celebrity_id bigint,
    heart_id           bigint generated by default as identity,
    member_member_id   bigint,
    primary key (heart_id)
);
create table member
(
    created_at    timestamp(6) not null,
    member_id     bigint generated by default as identity,
    modified_at   timestamp(6) not null,
    phone_number  varchar(11),
    nickname      varchar(15)  not null,
    email         varchar(50)  not null,
    password      varchar(255) not null,
    profile_image varchar(255),
    refresh_token varchar(255),
    social_id     varchar(255),
    user_role     varchar(255) check (user_role in ('USER', 'ADMIN')),
    primary key (member_id),
    unique (email)
);
create table news
(
    created_at  timestamp(6) not null,
    modified_at timestamp(6) not null,
    news_id     bigint generated by default as identity,
    post_id     bigint       not null,
    writer_id   bigint       not null,
    title       varchar(100) not null,
    content     TEXT         not null,
    image_urls  varchar(255),
    primary key (news_id)
);
create table payment
(
    amount           integer      not null,
    created_at       timestamp(6) not null,
    member_member_id bigint,
    modified_at      timestamp(6) not null,
    payment_id       bigint generated by default as identity,
    post_post_id     bigint,
    imp_uid          varchar(255),
    primary key (payment_id)
);
create table post
(
    participants           integer check (participants >= 0),
    target_price           integer check (target_price >= 1000),
    account_account_id     bigint unique,
    celebrity_celebrity_id bigint,
    created_at             timestamp(6) not null,
    deadline               timestamp(6),
    modified_at            timestamp(6) not null,
    post_id                bigint generated by default as identity,
    writer_member_id       bigint,
    title                  varchar(100) not null,
    introduction           TEXT         not null,
    post_status            varchar(255) check (post_status in ('ONGOING', 'COMPLETE', 'CLOSED')),
    thumbnail              varchar(255),
    primary key (post_id)
);
create table withdrawal
(
    balance           integer check (balance >= 0),
    is_approved       boolean      not null,
    withdrawal_amount integer      not null check (withdrawal_amount >= 0),
    applicant_id      bigint       not null,
    created_at        timestamp(6) not null,
    modified_at       timestamp(6) not null,
    post_id           bigint       not null,
    withdrawal_id     bigint generated by default as identity,
    deposit_account   varchar(255) not null,
    usage             varchar(255) not null,
    primary key (withdrawal_id)
);
create index IDX4c5vlqattm9ap41i5itkebdsh
    on account (post_id);
create index IDXl0ngvubp7ftv2pybasy30oimi
    on celebrity (name);
create index IDXrpvgoygmdn7olugutvfvuedqw
    on celebrity (follower_count);
create index index_comment_order
    on comment (comment_order);
alter table if exists heart
    add constraint FKp2mf77o6gvqfu40e6la3vdo1s
    foreign key (celeb_celebrity_id)
    references celebrity;
alter table if exists heart
    add constraint FKcgioqbl5gy7q5ovo1y3933bcn
    foreign key (member_member_id)
    references member;
alter table if exists payment
    add constraint FKapuw9hjist20jkybivi66dcb
    foreign key (member_member_id)
    references member;
alter table if exists payment
    add constraint FKhatjcdutf4pnpm53awa6ch4cc
    foreign key (post_post_id)
    references post;
alter table if exists post
    add constraint FKdqm9dwwa2xlwlbwqfj1x8yyov
    foreign key (account_account_id)
    references account;
alter table if exists post
    add constraint FKotg4w2no4kvnqsdd2q5vm5x4p
    foreign key (celebrity_celebrity_id)
    references celebrity;
alter table if exists post
    add constraint FK6blwbftdedetlo0xdt4tu0oki
    foreign key (writer_member_id)
    references member;
